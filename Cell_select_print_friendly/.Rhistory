library(shiny); runApp('web_app.R')
runApp('web_app.R')
runApp('web_app.R')
runApp('web_app.R')
runApp('web_app.R')
runApp('web_app.R')
runApp('web_app.R')
library(shiny); runApp('web_app.R')
runApp('web_app.R')
library(shiny); runApp('web_app.R')
runApp('web_app.R')
library(shiny); runApp('web_app.R')
runApp('source')
runApp('source')
runApp('web_app.R')
runApp('web_app.R')
runApp('web_app.R')
runApp('web_app.R')
library(ontologyIndex)
library(ontologyPlot)
data(hpo)
# # (not needed?)
phenotype_to_genes = read.delim("data/phenotype_to_genes.txt", skip = 1, header=FALSE)
colnames(phenotype_to_genes) = c("ID", "Phenotype", "EntrezID", "Gene",
"Additional", "Source", "LinkID")
#
# # load ewce results (not needed?)
load("data/tabulamuris_merged.rda")
View(results)
library(ontologyIndex)
library(ontologyPlot)
data(hpo)
# # (not needed?)
phenotype_to_genes = read.delim("data/phenotype_to_genes.txt", skip = 1, header=FALSE)
colnames(phenotype_to_genes) = c("ID", "Phenotype", "EntrezID", "Gene",
"Additional", "Source", "LinkID")
#
# # load ewce results (not needed?)
load("data/tabulamuris_merged.rda")
get_cell_ontology = function(cell, results, q_threshold, fold_threshold, phenotype_to_genes,hpo){
phenotype_to_genes = read.delim("data/phenotype_to_genes.txt", skip = 1, header=FALSE)
colnames(phenotype_to_genes) = c("ID", "Phenotype", "EntrezID", "Gene",
"Additional", "Source", "LinkID")
signif_cell_data = results[results$CellType == cell & results$q <= q_threshold & results$fold_change >= fold_threshold,]
signif_cell_data = add_hpo_termid_col(signif_cell_data, phenotype_to_genes , hpo)
return (signif_cell_data)
}
get_hpo_termID = function(phenotype, phenotype_to_genes){
return(phenotype_to_genes$ID[phenotype_to_genes$Phenotype == phenotype][1])
}
add_hpo_termid_col = function(cells, phenotype_to_genes, hpo) {
HPOtermID = c()
ValidTerm = c()
for (p in cells$list){
termid = get_hpo_termID(p, phenotype_to_genes)
ValidTerm = append(ValidTerm,(termid %in% hpo$id))
HPOtermID = append(HPOtermID, termid)
}
cells$HPO_term_Id =HPOtermID
cells$HPO_term_valid = ValidTerm
return(cells)
}
results=all_results_merged
cell = "Bladder cells"
heatmapped_value = "q"
q_threshold = 0.05
fold_threshold =1
one_cell_ontology_plot_heatmap = function(results, cell = "Bladder cells", heatmapped_value = "q",
q_threshold, fold_threshold, phenotype_to_genes, hpo){
#' heatmapped_value = "q", "fold_change", or "p". In other words, any continuous variable from the all_cell_ontology to be mapped on to the heatmap colors
#' reverse_heatmap - reverse reccomeneded for q or p values, so the lowest "most significant" value is red
cells = get_cell_ontology(cell, results, q_threshold, fold_threshold, phenotype_to_genes, hpo)
cells = cells[cells$HPO_term_valid,]
if (heatmapped_value == "q"){
values = cells$q
} else if (heatmapped_value == "p"){
values = cells$p
} else if (heatmapped_value == "fold change"){
values = cells$fold_change
} else {
print("invalid heatmapped_value, enter 'p', 'q', or 'fold change'"); return(0)
}
names(values) = cells$HPO_term_Id
values = sort(values)
# creating the list of colors for the heatmap
heatpallette = heat.colors(length(values))
heat = c()
prev = 0
index = 1
next_index = 1
# this was necessary so equal values have the same color mapped to them
for (v in values){
if (v == prev) {
heat = append(heat, heatpallette[index])
next_index = next_index + 1
} else if (v > prev){
index = index + next_index
next_index = 1
prev = v
heat = append(heat, heatpallette[index])
}
}
if (heatmapped_value == "fold change" ) {
heat = rev(heat)}
return (onto_plot(hpo,terms=names(values), fillcolor = heat, shape = "rect"))
}
results=all_results_merged
cell = "Bladder cells"
q_threshold = 0.05
fold_threshold =1
one_cell_ontology_plot_heatmap(results, cell = "Bladder cells", heatmapped_value = "fold change",
q_threshold, fold_threshold, phenotype_to_genes, hpo)
#' heatmapped_value = "q", "fold_change", or "p". In other words, any continuous variable from the all_cell_ontology to be mapped on to the heatmap colors
#' reverse_heatmap - reverse reccomeneded for q or p values, so the lowest "most significant" value is red
cells = get_cell_ontology(cell, results, q_threshold, fold_threshold, phenotype_to_genes, hpo)
cells = cells[cells$HPO_term_valid,]
if (heatmapped_value == "q"){
values = cells$q
} else if (heatmapped_value == "p"){
values = cells$p
} else if (heatmapped_value == "fold change"){
values = cells$fold_change
} else {
print("invalid heatmapped_value, enter 'p', 'q', or 'fold change'"); return(0)
}
names(values) = cells$HPO_term_Id
values = sort(values)
# creating the list of colors for the heatmap
heatpallette = heat.colors(length(values))
heat = c()
prev = 0
index = 1
next_index = 1
# this was necessary so equal values have the same color mapped to them
for (v in values){
if (v == prev) {
heat = append(heat, heatpallette[index])
next_index = next_index + 1
} else if (v > prev){
index = index + next_index
next_index = 1
prev = v
heat = append(heat, heatpallette[index])
}
}
if (heatmapped_value == "fold change" ) {
heat = rev(heat)}
ggplot(values, aes(x = names(values), y = values, fill = values)) + geom_point()
library(ggplot2)
ggplot(values, aes(x = names(values), y = values, fill = values)) + geom_point()
ggplot(data.frame(values), aes(x = names(values), y = values, fill = values)) + geom_point()
ggplot(data.frame(values), aes(x = values,y = values, fill = values)) + geom_point()
ggplot(data.frame(values), aes(x = values,y = values, fill = values)) + geom_point() +
scale_color_discrete(palette = heat )
ggplot(data.frame(values), aes(x = values,y = values, fill = values)) + geom_point() +
scale_fill_manual(values = heat )
ggplot(data.frame(values), aes(x = values,y = values, fill = factor(values))) + geom_point() +
scale_fill_manual(values = heat )
ggplot(data.frame(values), aes(x = values) + geom_bar()
return (onto_plot(hpo,terms=names(values), fillcolor = heat, shape = "rect"))
}
results=all_results_merged
cell = "Bladder cells"
q_threshold = 0.05
fold_threshold =1
one_cell_ontology_plot_heatmap(results, cell = "Bladder cells", heatmapped_value = "fold change",
q_threshold, fold_threshold, phenotype_to_genes, hpo)
ggplot(data.frame(values), aes(x = values)) + geom_bar()
ggplot(data.frame(values), aes(x = values)) + geom_bar() + scale_fill_manual(values = heat)
heat
ggplot(data.frame(values), aes(x = values, fill = values)) + geom_bar() + scale_fill_manual(values = heat)
ggplot(data.frame(values), aes(x = values, fill = values)) + geom_bar() + scale_fill_manual(values = heat)
ggplot(data.frame(values), aes(x = values, fill = values)) + geom_bar() + scale_fill_continuous(palette = heat.colors())
ggplot(data.frame(values), aes(x = values, fill = values)) + geom_bar() + scale_fill_continuous(palette = heat.colors(n = length(values)))
ggplot(data.frame(values), aes(x = values, y=values)) + geom_point()
ggplot(data.frame(values), aes(x = values, y=values)) + geom_point(fill = heat)
ggplot(data.frame(values), aes(x = values, y=values)) + geom_point(fill = heat)
#' heatmapped_value = "q", "fold_change", or "p". In other words, any continuous variable from the all_cell_ontology to be mapped on to the heatmap colors
#' reverse_heatmap - reverse reccomeneded for q or p values, so the lowest "most significant" value is red
cells = get_cell_ontology(cell, results, q_threshold, fold_threshold, phenotype_to_genes, hpo)
cells = cells[cells$HPO_term_valid,]
if (heatmapped_value == "q"){
values = cells$q
} else if (heatmapped_value == "p"){
values = cells$p
} else if (heatmapped_value == "fold change"){
values = cells$fold_change
} else {
print("invalid heatmapped_value, enter 'p', 'q', or 'fold change'"); return(0)
}
names(values) = cells$HPO_term_Id
values = sort(values)
# creating the list of colors for the heatmap
heatpallette = heat.colors(length(values))
heat = c()
prev = 0
index = 1
next_index = 1
# this was necessary so equal values have the same color mapped to them
for (v in values){
if (v == prev) {
heat = append(heat, heatpallette[index])
next_index = next_index + 1
} else if (v > prev){
index = index + next_index
next_index = 1
prev = v
heat = append(heat, heatpallette[index])
}
}
if (heatmapped_value == "fold change" ) {
heat = rev(heat)}
library(ggplot2)
ggplot(data.frame(values), aes(x = values, y=values)) + geom_point(fill = heat)
heat
ggplot(data.frame(values), aes(x = values, y=values)) + geom_point(fill = heat[!is.na(heat)])
ggplot(data.frame(values), aes(x = values, y=values, fill = values))
ggplot(data.frame(values), aes(x = values, y=values, fill = values))  + geom_point()
ggplot(data.frame(values), aes(x = values, y=values, color = values))  + geom_point()
ggplot(data.frame(values), aes(x = values, y=values, color = values))  + geom_point(palette = heat)
ggplot(data.frame(values), aes(x = values, y=values, color = values))  + geom_point() +
scale_color_continuous(palette = heat.colors(n=length(values)))
ggplot(data.frame(values), aes(x = values, y=values ))  + geom_point(color = heat.colors(n=length(values))) +
return (onto_plot(hpo,terms=names(values), fillcolor = heat, shape = "rect"))
ggplot(data.frame(values), aes(x = values, y=values ))  + geom_point(color = heat.colors(n=length(values)))
ggplot(data.frame(values), aes(x = values, y=values ))  + geom_point(color = heat.colors(n=length(values), rev=TRUE))
heatmapped_value="fold_change"
#' heatmapped_value = "q", "fold_change", or "p". In other words, any continuous variable from the all_cell_ontology to be mapped on to the heatmap colors
#' reverse_heatmap - reverse reccomeneded for q or p values, so the lowest "most significant" value is red
cells = get_cell_ontology(cell, results, q_threshold, fold_threshold, phenotype_to_genes, hpo)
cells = cells[cells$HPO_term_valid,]
if (heatmapped_value == "q"){
values = cells$q
} else if (heatmapped_value == "p"){
values = cells$p
} else if (heatmapped_value == "fold change"){
values = cells$fold_change
} else {
print("invalid heatmapped_value, enter 'p', 'q', or 'fold change'"); return(0)
}
names(values) = cells$HPO_term_Id
values = sort(values)
# creating the list of colors for the heatmap
heatpallette = heat.colors(length(values))
heat = c()
prev = 0
index = 1
next_index = 1
# this was necessary so equal values have the same color mapped to them
for (v in values){
if (v == prev) {
heat = append(heat, heatpallette[index])
next_index = next_index + 1
} else if (v > prev){
index = index + next_index
next_index = 1
prev = v
heat = append(heat, heatpallette[index])
}
}
if (heatmapped_value == "fold change" ) {
heat = rev(heat)}
library(ggplot2)
ggplot(data.frame(values), aes(x = values, y=values ))  + geom_point(color = heat.colors(n=length(values), rev=TRUE))
heatmapped_value="fold change"
#' heatmapped_value = "q", "fold_change", or "p". In other words, any continuous variable from the all_cell_ontology to be mapped on to the heatmap colors
#' reverse_heatmap - reverse reccomeneded for q or p values, so the lowest "most significant" value is red
cells = get_cell_ontology(cell, results, q_threshold, fold_threshold, phenotype_to_genes, hpo)
cells = cells[cells$HPO_term_valid,]
if (heatmapped_value == "q"){
values = cells$q
} else if (heatmapped_value == "p"){
values = cells$p
} else if (heatmapped_value == "fold change"){
values = cells$fold_change
} else {
print("invalid heatmapped_value, enter 'p', 'q', or 'fold change'"); return(0)
}
names(values) = cells$HPO_term_Id
values = sort(values)
# creating the list of colors for the heatmap
heatpallette = heat.colors(length(values))
heat = c()
prev = 0
index = 1
next_index = 1
# this was necessary so equal values have the same color mapped to them
for (v in values){
if (v == prev) {
heat = append(heat, heatpallette[index])
next_index = next_index + 1
} else if (v > prev){
index = index + next_index
next_index = 1
prev = v
heat = append(heat, heatpallette[index])
}
}
if (heatmapped_value == "fold change" ) {
heat = rev(heat)}
library(ggplot2)
ggplot(data.frame(values), aes(x = values, y=values ))  + geom_point(color = heat.colors(n=length(values), rev=TRUE))
ggplot(data.frame(values), aes(x = values, y=values, color = values ))  + geom_point(color = heat.colors(n=length(values), rev=TRUE))
ggplot(data.frame(values), aes(x = values, y=values, color = values ))  + geom_point()
ggplot(data.frame(values), aes(x = values, y=values, color = values ))  + geom_point() +
scale_color_continuous(palette  = heat.colors(n=length(values), rev=TRUE))
ggplot(data.frame(values), aes(x = values, y=values, color = values ))  + geom_point() +
scale_color_manual(palette  = heat.colors(n=length(values), rev=TRUE))
ggplot(data.frame(values), aes(x = values, y=values, color = values ))  + geom_point() +
scale_color_manual(palette  = heat.colors(n=length(values), rev=TRUE))
ggplot(data.frame(values), aes(x = values, y=values, color = values ))  + geom_point() +
scale_color_gradient2(palette  = heat.colors(n=length(values), rev=TRUE))
ggplot(data.frame(values), aes(x = values, y=values, color = values ))  + geom_point() +
scale_color_gradient2(pal  = heat.colors(n=length(values), rev=TRUE))
ggplot(data.frame(values), aes(x = values, y=values, color = values ))  + geom_point() +
scale_color_gradient(pal  = heat.colors(n=length(values), rev=TRUE))
ggplot(data.frame(values), aes(x = values, y=values, color = values ))  + geom_point() +
scale_fill_gradient(pal  = heat.colors(n=length(values), rev=TRUE))
ggplot(data.frame(values), aes(x = values, y=values, color = values ))  + geom_bar() +
scale_fill_gradient(pal  = heat.colors(n=length(values), rev=TRUE))
ggplot(data.frame(values), aes(x = values, y=values, color = values ))  + geom_box() +
scale_fill_gradient(pal  = heat.colors(n=length(values), rev=TRUE))
ggplot(data.frame(values), aes(x = values, y=values, color = values ))  + geom_boxplot() +
scale_fill_gradient(pal  = heat.colors(n=length(values), rev=TRUE))
ggplot(data.frame(values), aes(x = values, y=values, color = values ))  + geom_bar() +
scale_fill_gradient(pal  = heat.colors(n=length(values), rev=TRUE))
ggplot(data.frame(values), aes(x = values, fill = values ))  + geom_bar() +
scale_fill_gradient(pal  = heat.colors(n=length(values), rev=TRUE))
plot(heat)
plot(values)
plot(values, palette(heat))
plot(values,values, palette(heat))
ggplot(data.frame(values), aes(values, values, color = values)) + geom_bar()
ggplot(data.frame(values), aes(values, fill = values)) + geom_bar()
ggplot(data.frame(values), aes(x=values, fill = values)) + geom_bar()
ggplot(data.frame(values), aes(x=values, color= values)) + geom_point()
ggplot(data.frame(values), aes(x=valuesy=values, color= values)) + geom_point()
ggplot(data.frame(values), aes(x=values,y=values, color= values)) + geom_point()
ggplot(data.frame(values), aes(x=values,y=values, color= values)) + geom_point() +
scale_color_continuous(palette = heat.colors())
ggplot(data.frame(values), aes(x=values,y=values, color= values)) + geom_point() +
scale_color_continuous(palette = heat.colors())
ggplot(data.frame(values), aes(x=values,y=values, color= values)) + geom_point() +
scale_color_manual(palette = heat.colors(n = length(values)))
ggplot(data.frame(values), aes(x=values,y=values, color= values)) + geom_point() +
scale_color_manual(palette = heat.colors(n = length(values)))
ggplot(data.frame(values), aes(x=values,y=values, color= factor(values))) + geom_point() +
scale_color_manual(palette = heat.colors(n = length(values)))
ggplot(data.frame(values), aes(x=values,y=values, color= factor(values))) + geom_point() +
scale_color_manual(palette = heat.colors(n = length(factor(values))))
ggplot(data.frame(values), aes(x=values,y=values)) + geom_point() +
scale_color_manual(values = heat.colors(n=length(values), rev =TRUE))
ggplot(data.frame(values), aes(x=values,y=values)) + geom_point() +
scale_color_manual(values = heat.colors(n=length(values), rev =TRUE))
ggplot(data.frame(values), aes(x = values, fill = values ))  + geom_bar() +
scale_fill_gradient(pal  = heat.colors(n=length(values), rev=TRUE))
ggplot(data.frame(values), aes(x = values, y=values, color = values ))  + geom_point() +
scale_color_manual(palette  = heat.colors(n=length(values), rev=TRUE))
ggplot(data.frame(values), aes(x = values, y=values ))  + geom_point(color = heat.colors(n=length(values), rev=TRUE))
ggplot(data.frame(values), aes(x = 1, y=values ))  + geom_bar(fill = heat.colors(n=length(values), rev=TRUE))
ggplot(data.frame(values), aes(x=values ))  + geom_bar(fill = heat.colors(n=length(values), rev=TRUE))
ggplot(data.frame(values), aes(x = values, y=values ))  + geom_point(color = heat.colors(n=length(values), rev=TRUE)) +
scale_color_manual(values=heat.colors(n=length(values), rev=TRUE))
values
vdf = data.frame(values)
View(vdf)
vdf$colors = heat.colors(n=length(values), rev=TRUE)
View(vdf)
ggplot(vdf, aes(x = values, y=values, color = colors ))  + geom_point(color = heat.colors(n=length(values), rev=TRUE)) +
scale_color_manual(values=heat.colors(n=length(values), rev=TRUE))
library(ggplot2)
vdf = data.frame(values)
vdf$colors = heat.colors(n=length(values), rev=TRUE)
ggplot(vdf, aes(x = values, y=values, color = colors ))  + geom_point() +
scale_color_manual(values=heat.colors(n=length(values), rev=TRUE))
ggplot(vdf, aes(x = values, y=values, color = values ))  + geom_point() +
scale_color_manual(values=heat.colors(n=length(values), rev=TRUE))
vdf$fv = factor(values)
ggplot(vdf, aes(x = values, y=values, color = fv ))  + geom_point() +
scale_color_manual(values=heat.colors(n=length(values), rev=TRUE))
21//2
round(21/2,0)
ggplot(vdf[c(1,round(nrow(vdf)/2,0), nrow(vdf)),], aes(x = values, y=values, color = fv ))  + geom_point() +
scale_color_manual(values=heat.colors(n=length(values), rev=TRUE))
ggplot(vdf[c(1,round(nrow(vdf)/2,0), nrow(vdf)),], aes(x = values, y=values, color = fv ))  + geom_point() +
scale_color_manual(values=heat.colors(n=3, rev=TRUE))
ggplot(vdf[c(1,round(nrow(vdf)/2,0), nrow(vdf)),], aes(x = values, y=values, color = fv )) +
geom_point() +
scale_color_manual(values=heat.colors(n=3, rev=TRUE), name= "Fold Change")
ggplot(vdf[c(1,round(nrow(vdf)/2,0), nrow(vdf)),], aes(x = values, y=values, color = round(fv, 3) )) +
geom_point() +
scale_color_manual(values=heat.colors(n=3, rev=TRUE), name= "Fold change") +
return (onto_plot(hpo,terms=names(values), fillcolor = heat, shape = "rect"))
ggplot(vdf[c(1,round(nrow(vdf)/2,0), nrow(vdf)),], aes(x = values, y=values, color = fv )) +
geom_point() +
scale_color_manual(values=heat.colors(n=3, rev=TRUE), name= "Fold change") +
return (onto_plot(hpo,terms=names(values), fillcolor = heat, shape = "rect"))
ggplot(vdf[c(1,round(nrow(vdf)/2,0), nrow(vdf)),], aes(x = values, y=values, color = round(fv,3) )) +
geom_point() +
scale_color_manual(values=heat.colors(n=3, rev=TRUE), name= "Fold change")
vdf = data.frame(values)
vdf$colors = heat.colors(n=length(values), rev=TRUE)
vdf$fv = factor(round(values,2))
ggplot(vdf[c(1,round(nrow(vdf)/2,0), nrow(vdf)),], aes(x = values, y=values, color = fv )) +
geom_point() +
scale_color_manual(values=heat.colors(n=3, rev=TRUE), name= "Fold change")
ggplot(vdf[c(1, nrow(vdf)),], aes(x = values, y=values, color = fv )) +
geom_point() +
scale_color_manual(values=heat.colors(n=2, rev=TRUE), name= "Fold change")
library(ggplot2)
vdf = data.frame(values)
vdf$colors = heat.colors(n=length(values), rev=TRUE)
vdf$fv = factor(round(values,2))
plt <- ggplot(vdf[c(1, nrow(vdf)),], aes(x = values, y=values, color = fv )) +
geom_point() +
scale_color_manual(values=heat.colors(n=2, rev=TRUE), name= "Fold change")
cowplot::get_legend(plt)
ledge = cowplot::get_legend(plt)
View(ledge)
ledge
cowplot(ledge)
library(shiny); runApp('web_app.R')
library(shiny); runApp('web_app.R')
runApp('web_app.R')
